import java.util.ArrayList;
import java.util.Stack;
import java.util.Scanner;

public class CodeStack {

    public static double expression(String expression, ArrayList<String> steps) {
        expression = expression.replaceAll("\\s", "");

        if (!isValidExpression(expression)) {
            return Double.NaN;
        }

        Stack<Double> operandStack = new Stack<>();
        Stack<Character> operatorStack = new Stack<>();

        for (int i = 0; i < expression.length(); i++) {
            char ch = expression.charAt(i);

            if (Character.isDigit(ch)) {
                StringBuilder operand = new StringBuilder();
                operand.append(ch);

                while (i + 1 < expression.length() && (Character.isDigit(expression.charAt(i + 1)) || expression.charAt(i + 1) == '.')) {
                    operand.append(expression.charAt(i + 1));
                    i++;
                }
                operandStack.push(Double.parseDouble(operand.toString()));
                steps.add(operand.toString());
            } else if (ch == '(') {
                operatorStack.push(ch);
            } else if (ch == ')') {
                while (operatorStack.peek() != '(') {
                    char operator = operatorStack.pop();
                    double operand2 = operandStack.pop();
                    double operand1 = operandStack.pop();
                    String step = "(" + steps.get(steps.size() - 2) + operator + steps.get(steps.size() - 1) + ")";
                    steps.remove(steps.size() - 1);
                    steps.set(steps.size() - 1, step);
                    operandStack.push(operation(operand1, operator, operand2));
                    System.out.println("Step: " + step + " = " + operandStack.peek());
                }
                operatorStack.pop(); // Discard the '('
            } else if ("+-*/^".indexOf(ch) != -1) {
                while (!operatorStack.isEmpty() && precedence(operatorStack.peek()) >= precedence(ch)) {
                    char operator = operatorStack.pop();
                    double operand2 = operandStack.pop();
                    double operand1 = operandStack.pop();
                    String step = "(" + steps.get(steps.size() - 2) + operator + steps.get(steps.size() - 1) + ")";
                    steps.remove(steps.size() - 1);
                    steps.set(steps.size() - 1, step);
                    operandStack.push(operation(operand1, operator, operand2));
                    System.out.println("Step: " + step + " = " + operandStack.peek());
                }
                operatorStack.push(ch);
            }
        }

        while (!operatorStack.isEmpty()) {
            char operator = operatorStack.pop();
            double operand2 = operandStack.pop();
            double operand1 = operandStack.pop();
            String step = "(" + steps.get(steps.size() - 2) + operator + steps.get(steps.size() - 1) + ")";
            steps.remove(steps.size() - 1);
            steps.set(steps.size() - 1, step);
            operandStack.push(operation(operand1, operator, operand2));
            System.out.println("Step: " + step + " = " + operandStack.peek());
        }

        return operandStack.pop();
    }

    private static int precedence(char operator) {
        if (operator == '^') {
            return 3;
        } else if (operator == '*' || operator == '/') {
            return 2;
        } else if (operator == '+' || operator == '-') {
            return 1;
        } else {
            return 0;
        }
    }

    private static double operation(double operand1, char operator, double operand2) {
        switch (operator) {
            case '+':
                return operand1 + operand2;
            case '-':
                return operand1 - operand2;
            case '*':
                return operand1 * operand2;
            case '/':
                if (operand2 == 0) {
                    throw new ArithmeticException("Division by zero is not allowed");
                }
                return operand1 / operand2;
            case '^':
                return Math.pow(operand1, operand2);
            default:
                throw new IllegalArgumentException("Invalid operator: " + operator);
        }
    }

    private static boolean isValidExpression(String expression) {
        if ("+-*/^".indexOf(expression.charAt(0)) != -1) {
            return false;
        }

        for (int i = 0; i < expression.length(); i++) {
            char ch = expression.charAt(i);

            if ("+-*/^".indexOf(ch) != -1) {
                if (i + 1 < expression.length() && "+-*/^".indexOf(expression.charAt(i + 1)) != -1) {
                    return false;
                }
            }

            if (!(Character.isDigit(ch) || "+-*/^()".indexOf(ch) != -1)) {
                return false;
            }
        }

        return true;
    }

    public static String Postfix(String infixExpression) {
        StringBuilder postfix = new StringBuilder();
        Stack<Character> operatorStack = new Stack<>();

        for (char ch : infixExpression.toCharArray()) {
            if (ch == ' ') {
                continue;
            } else if (Character.isDigit(ch) || Character.isLetter(ch)) {
                postfix.append(ch).append(" ");
            } else if (ch == '(') {
                operatorStack.push(ch);
            } else if (ch == ')') {
                while (!operatorStack.isEmpty() && operatorStack.peek() != '(') {
                    postfix.append(operatorStack.pop()).append(" ");
                }
                operatorStack.pop();
            } else {
                while (!operatorStack.isEmpty() && precedence(operatorStack.peek()) >= precedence(ch)) {
                    postfix.append(operatorStack.pop()).append(" ");
                }
                operatorStack.push(ch);
            }
        }

        while (!operatorStack.isEmpty()) {
            postfix.append(operatorStack.pop()).append(" ");
        }

        return postfix.toString().trim();
    }

    public static void main(String[] args) {
        Scanner scnr = new Scanner(System.in);

        while (true) {
            System.out.print("Enter Infix Expression: ");
            String infix = scnr.nextLine();

            if (infix.equalsIgnoreCase("0")) {
                System.out.println("Exiting the program.");
                break;
            }

            String infixExp = infix;

            ArrayList<String> steps = new ArrayList<>();
            double result = expression(infixExp, steps);

            if (!Double.isNaN(result)) {
                String postfixExpression = Postfix(infixExp);
                System.out.println("Infix to Postfix: " + postfixExpression);

                System.out.println("Final Result: " + result);
                break;
            } else {
                System.out.println("Error: Invalid expression. Please enter a valid expression.\n");
            }
        }
    }
}

